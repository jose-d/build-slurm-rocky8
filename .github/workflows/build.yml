---

name: Build Slurm
run-name: ${{ github.actor }} is attempting to build pmix and slurm ðŸš€
on: workflow_dispatch
env:
  # github image repository url - used to cache docker images
  IMG_REPO_URL: ghcr.io/jose-d/build-slurm-rocky8
  # version of openpmix and slurm to download and build together
  PMIX_VERSION: 4.2.7
  SLURM_VERSION: 23.02.6
  # version of CUDA to take NVML library from:
  NVML_VERSION: '12-2'

jobs:
  build_base_build-image:
    name: Build base docker image
    runs-on: ubuntu-latest
    env:
      PERSISTENCE_FILE: build_base_build-image_vars.txt
    steps:
      - name: Create BASEIMAGE_RELTAG and save it into file and github env
        shell: bash
        run: |
          BASEIMAGE_RELTAG="baseimg_$(date +%Y%m%d%H%M%S)"
          BASEIMAGE_URL="${IMG_REPO_URL}:${BASEIMAGE_RELTAG}"
          
          echo "BASEIMAGE_URL=${BASEIMAGE_URL}" >> $PERSISTENCE_FILE
          echo "BASEIMAGE_URL=${BASEIMAGE_URL}" >> $GITHUB_ENV
          
          echo "Created base image with BASEIMAGE_URL=${BASEIMAGE_URL}" >> $GITHUB_STEP_SUMMARY

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_SECRET }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:.github/dockerfiles/base"
          push: true
          tags: ${{ env.BASEIMAGE_URL }}
         
      - name: Upload persistent data form job as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE }}
          path: ${{ env.PERSISTENCE_FILE }}
        
  build_slurm_build_image:
    name: Build slurm build docker image
    runs-on: ubuntu-latest
    needs: build_base_build-image
    env:
      PERSISTENCE_FILE: build_slurm_build_image_vars.txt
    steps:

      - name: Download persistent data from build_base_build-image
        uses: actions/download-artifact@v3
        with:
          name: build_base_build-image_vars.txt

      - name: Read persistent data and add them into env, create SLURMIMAGE_RELTAG and save persistent data
        shell: bash
        run: |
          source build_base_build-image_vars.txt
          
          SLURM_RELTAG="$(date +%Y%m%d%H%M%S)"
          SLURMIMAGE_RELTAG="slurmimg_${SLURM_RELTAG}"
          SLURMIMAGE_URL="${IMG_REPO_URL}:${SLURMIMAGE_RELTAG}"

          touch ${PERSISTENCE_FILE}
          
          echo "SLURM_RELTAG=${SLURM_RELTAG}" | tee --append ${GITHUB_ENV} ${GITHUB_STEP_SUMMARY} ${PERSISTENCE_FILE}
          echo "BASEIMAGE_URL=${BASEIMAGE_URL}" | tee --append ${GITHUB_ENV} ${GITHUB_STEP_SUMMARY} ${PERSISTENCE_FILE}
          echo "SLURMIMAGE_URL=${SLURMIMAGE_URL}" | tee --append ${GITHUB_ENV} ${GITHUB_STEP_SUMMARY} ${PERSISTENCE_FILE}
          echo "SLURMIMAGE_RELTAG=${SLURMIMAGE_RELTAG}" | tee --append ${GITHUB_ENV} ${GITHUB_STEP_SUMMARY} ${PERSISTENCE_FILE}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_SECRET }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          build-args: |
            NVML_VERSION=${{ env.NVML_VERSION }}
            BASE_IMAGE=${{ env.BASEIMAGE_URL }}
          context: "{{defaultContext}}:.github/dockerfiles/slurm"
          push: true
          tags: ${{ env.SLURMIMAGE_URL }}

      - name: Upload persistent data form job as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE }}
          path: ${{ env.PERSISTENCE_FILE }}

  build_pmix_build_image:
    name: Build pmix build docker image
    runs-on: ubuntu-latest
    needs: build_base_build-image
    env:
      PERSISTENCE_FILE: build_pmix_build_image_vars.txt
    steps:
      - name: Download persistent data from build_base_build-image
        uses: actions/download-artifact@v3
        with:
          name: build_base_build-image_vars.txt

      - name: Read persistent data and add them into env, create PMIXIMAGE_RELTAG and save persistent data
        shell: bash
        run: |
          source build_base_build-image_vars.txt
          
          PMIX_RELTAG="$(date +%Y%m%d%H%M%S)"
          PMIXIMAGE_RELTAG="pmiximg_${PMIX_RELTAG}"
          PMIXIMAGE_URL="${IMG_REPO_URL}:${PMIXIMAGE_RELTAG}"

          touch ${PERSISTENCE_FILE}

          echo "PMIXIMAGE_RELTAG=${PMIXIMAGE_RELTAG}" | tee --append $GITHUB_ENV $GITHUB_STEP_SUMMARY ${PERSISTENCE_FILE}
          echo "BASEIMAGE_URL=${BASEIMAGE_URL}" | tee --append $GITHUB_ENV $GITHUB_STEP_SUMMARY
          echo "PMIX_RELTAG=${PMIX_RELTAG}" | tee --append $PERSISTENCE_FILE
          echo "PMIXIMAGE_URL=${PMIXIMAGE_URL}" | tee --append $GITHUB_ENV $GITHUB_STEP_SUMMARY $PERSISTENCE_FILE
            
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_SECRET }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          build-args: |
            BASE_IMAGE=${{ env.BASEIMAGE_URL }}
          context: "{{defaultContext}}:.github/dockerfiles/pmix"
          push: true
          tags: ${{ env.IMG_REPO_URL }}:${{ env.PMIXIMAGE_RELTAG }}

      - name: Upload persistent data form job as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE }}
          path: ${{ env.PERSISTENCE_FILE }}

  build_pmix:
    name: Build pmix
    runs-on: ubuntu-latest
    needs: build_pmix_build_image
    env:
      PERSISTENCE_FILE_PMIX: build_pmix_build_image_vars.txt
      PERSISTENCE_FILE: build_pmix_vars.txt
      GHCR_U: ${{ github.actor }}
      GHCR_S: ${{ secrets.PACKAGES_SECRET }}
    steps:
      - name: Download persistent data from build_pmix_build_image
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE_PMIX }}  

      - name: checkout pmix build script
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts/build_pmix.sh
          sparse-checkout-cone-mode: false
          path: scripts
          
      - name: Login to ghcr registry with docker and do build
        run: |
          source ${PERSISTENCE_FILE_PMIX}
          echo $GHCR_S | docker login ghcr.io -u ${GHCR_U} --password-stdin
          docker run --cidfile /tmp/docker_test.cid \
                     --env-file $PERSISTENCE_FILE_PMIX \
                     --env GITHUB_WORKSPACE=${GITHUB_WORKSPACE} \
                     --env PMIX_VERSION=${PMIX_VERSION} \
                     -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} \
                     -v ${HOME}:${HOME} \
                     -w ${GITHUB_WORKSPACE} ${PMIXIMAGE_URL} /bin/bash scripts/.github/scripts/build_pmix.sh

      - name: Upload pmix rpms as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pmix_rpms
          path: |
            ${{ github.workspace }}/rpms/*.rpm

  build_slurm:
    name: Build slurm
    runs-on: ubuntu-latest
    needs:
      - build_pmix
      - build_slurm_build_image
    env:
      PERSISTENCE_FILE_PMIX: build_pmix_build_image_vars.txt
      PERSISTENCE_FILE_SLURM: build_slurm_build_image_vars.txt
      PERSISTENCE_FILE: build_slurm_vars.txt
      GHCR_U: ${{ github.actor }}
      GHCR_S: ${{ secrets.PACKAGES_SECRET }}
    steps:
      # download data from previous jobs:
      
      - name: Download persistent data from PERSISTENCE_FILE_PMIX
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE_PMIX }}

      - name: Download persistent data from PERSISTENCE_FILE_SLURM
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE_SLURM }}

      - name: Download pmix rpms
        uses: actions/download-artifact@v3
        with:
          name: pmix_rpms
          path: pmix_rpms

      - name: checkout slurm build script
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/scripts/build_slurm.sh
          sparse-checkout-cone-mode: false
          path: scripts

      - name: Download slurm tarball, unpack, patch spec file
        shell: bash
        run: |
           source $PERSISTENCE_FILE_SLURM
           wget --quiet https://download.schedmd.com/slurm/slurm-${SLURM_VERSION}.tar.bz2
           tar -xf ./slurm*
           #cp slurm-*.tar.bz2 $HOME/rpmbuild/SOURCES/
           sed -i "s/^%define rel.*$/%define rel     ${SLURM_RELTAG}/g" slurm*/slurm.spec
           sed -i "s/^%global slurm_source_dir.*$/%global slurm_source_dir %{name}-%{version}/g" ./slurm*/slurm.spec

      - name: Login to ghcr registry with docker and do build
        shell: bash
        run: |
            set -x
            source $PERSISTENCE_FILE_SLURM
            echo $GHCR_S | docker login ghcr.io -u ${GHCR_U} --password-stdin
            docker run --cidfile /tmp/docker_test.cid \
                     --env-file $PERSISTENCE_FILE_SLURM \
                     --env GITHUB_WORKSPACE=${GITHUB_WORKSPACE} \
                     -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} \
                     -v ${HOME}:${HOME} \
                     -w ${GITHUB_WORKSPACE} ${SLURMIMAGE_URL} /bin/bash scripts/.github/scripts/build_slurm.sh

      - name: Upload slurm rpms as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: slurm_rpms
          path: |
            ${{ github.workspace }}/rpms/*.rpm

      - name: Print build resume
        shell: bash
        run: |
          source $PERSISTENCE_FILE_SLURM
          echo "### Slurm" | tee --append $GITHUB_STEP_SUMMARY 
          echo "* version: $SLURM_VERSION" | tee --append $GITHUB_STEP_SUMMARY
          echo "* release: $SLURM_RELTAG" | tee --append $GITHUB_STEP_SUMMARY
          echo "* built with NVML version: $NVML_VERSION" | tee --append $GITHUB_STEP_SUMMARY
          echo "### PMI-X" | tee --append $GITHUB_STEP_SUMMARY
          echo "* version: $PMIX_VERSION" | tee --append $GITHUB_STEP_SUMMARY
          echo "* release: $PMIX_RELTAG" | tee --append $GITHUB_STEP_SUMMARY

  publish_files:
    name: Publish build files in release
    runs-on: ubuntu-latest
    env:
      PERSISTENCE_FILE_PMIX: build_pmix_build_image_vars.txt
      PERSISTENCE_FILE_SLURM: build_slurm_build_image_vars.txt
    needs:
      - build_slurm
      - build_pmix
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download persistent data from PERSISTENCE_FILE_PMIX
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE_PMIX }}

      - name: Download persistent data from PERSISTENCE_FILE_SLURM
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE_SLURM }}

      - name: Read persistent data and add them into env
        shell: bash
        run: |
          source ${PERSISTENCE_FILE_PMIX}
          source ${PERSISTENCE_FILE_SLURM}
          
          echo "SLURM_VERSION=${SLURM_VERSION}" | tee --append $GITHUB_ENV
          echo "PMIX_VERSION=$PMIX_VERSION" | tee --append $GITHUB_ENV

      - name: Download pmix rpms artifact
        uses: actions/download-artifact@v3
        with:
          name: pmix_rpms
          path: pmix_rpms

      - name: Download slurm rpms artifact
        uses: actions/download-artifact@v3
        with:
          name: slurm_rpms
          path: slurm_rpms
        
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body: Body text test
          name: slurm-${{ env.SLURM_VERSION }} with pmix-${{ PMIX_VERSION }}
          files: |
            pmix_rpms/*.rpm
            slurm_rpms/*.rpm
            
    





          
