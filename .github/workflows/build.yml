---

# almost working docker version here: https://gist.github.com/jose-d/c69ea72ee8eea1d54fddb60da52c7bc1

name: release
run-name: ${{ github.actor }} is attempting to build pmix and slurm ðŸš€
on: workflow_dispatch
env:
  # github image repository url - used to cache docker images
  IMG_REPO_URL: ghcr.io/jose-d/build-slurm-rocky8
  # version of openpmix and slurm to download and build together
  PMIX_VERSION: 4.2.7
  SLURM_VERSION: 23.02.6
  
jobs:
  build_base_build-image:
    name: Build base docker image
    runs-on: ubuntu-latest
    steps:
      - name: Create BASEIMAGE_RELTAG and save it into file and github env
        shell: bash
        run: |
          BASEIMAGE_RELTAG="baseimg_$(date +%Y%m%d%H%M%S)"
          echo "BASEIMAGE_RELTAG=${BASEIMAGE_RELTAG}" > build_base_build-image_vars.txt
          echo "BASEIMAGE_RELTAG=${BASEIMAGE_RELTAG}" >> $GITHUB_ENV
          echo "BASEIMAGE_RELTAG=${BASEIMAGE_RELTAG}" >> $GITHUB_STEP_SUMMARY
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:.github/dockerfiles/base"
          push: false
          tags: ${{ env.IMG_REPO_URL }}:${{ env.BASEIMAGE_RELTAG }}

      - name: Login to github registry and push image there
        shell: bash
        run: |
          echo ${{ secrets.PACKAGES_SECRET }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo $?
          docker push ${IMG_REPO_URL}:${BASEIMAGE_RELTAG}
          
      - name: Upload persistent data form job as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: build_base_build-image_vars.txt
          path: build_base_build-image_vars.txt
      
      - name: Print into step_summary
        run: echo "Pushed into ${IMG_REPO_URL}:${BASEIMAGE_RELTAG}" >> $GITHUB_STEP_SUMMARY

  build_pmix_build-image:
    name: Build pmix build docker image
    runs-on: ubuntu-latest
    needs: build_base_build-image
    env:
      PERSISTENCE_FILE: build_pmix_build-image_vars.txt
    steps:
      - name: Download persistent data from build_base_build-image
        uses: actions/download-artifact@v3
        with:
          name: build_base_build-image_vars.txt

      - name: Read persistent data and add them into env, create PMIXIMAGE_RELTAG and save persistent data
        run: |
          source build_base_build-image_vars.txt
          echo "BASEIMAGE_RELTAG=${BASEIMAGE_RELTAG}" >> "$GITHUB_ENV"
          PMIX_RELTAG="$(date +%Y%m%d%H%M%S)"
          PMIXIMAGE_RELTAG="pmiximg_${PMIX_RELTAG}"
          
          echo "PMIXIMAGE_RELTAG=${PMIXIMAGE_RELTAG}" >> $GITHUB_ENV
          echo "PMIXIMAGE_RELTAG=${PMIXIMAGE_RELTAG}" >> $GITHUB_STEP_SUMMARY
          
          # persistence file ops
          touch ${PERSISTENCE_FILE}
          echo "PMIXIMAGE_RELTAG=${PMIXIMAGE_RELTAG}" >> ${PERSISTENCE_FILE}
          echo "PMIX_RELTAG=${PMIX_RELTAG}" >> build_pmix_build-image_vars.txt

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:.github/dockerfiles/pmix"
          push: false
          tags: ${{ env.IMG_REPO_URL }}:${{ env.PMIXIMAGE_RELTAG }}

      - name: Login to github registry and push image there
        shell: bash
        run: |
          echo ${{ secrets.PACKAGES_SECRET }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo $?
          docker push ${IMG_REPO_URL}:${PMIXIMAGE_RELTAG}

      - name: Upload persistent data form job as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE }}
          path: ${{ env.PERSISTENCE_FILE }}

      - name: Print into step_summary
        run: |
          echo "Pushed into ${IMG_REPO_URL}:${PMIXIMAGE_RELTAG}" >> $GITHUB_STEP_SUMMARY
          echo "Persistence file artifact: ${PERSISTENCE_FILE}" >> $GITHUB_STEP_SUMMARY
          echo "IMGURL=${IMG_REPO_URL}:${PMIXIMAGE_RELTAG}" >> "$GITHUB_OUTPUT"

  build_slurm_build-image:
    name: Build slurm build docker image
    runs-on: ubuntu-latest
    needs: build_base_build-image
    steps:

      - name: Download persistent data from build_base_build-image
        uses: actions/download-artifact@v3
        with:
          name: build_base_build-image_vars.txt

      - name: Read persistent data and add them into env, create SLURMIMAGE_RELTAG and save it into file and github env
        run: |
          source build_base_build-image_vars.txt
          echo "BASEIMAGE_RELTAG=${BASEIMAGE_RELTAG}" >> "$GITHUB_ENV"
          SLURMIMAGE_RELTAG="slurmimg_$(date +%Y%m%d%H%M%S)"
          echo "SLURMIMAGE_RELTAG=${SLURMIMAGE_RELTAG}" > build_slurm_build-image_vars.txt
          echo "SLURMIMAGE_RELTAG=${SLURMIMAGE_RELTAG}" >> $GITHUB_ENV
          echo "SLURMIMAGE_RELTAG=${SLURMIMAGE_RELTAG}" >> $GITHUB_STEP_SUMMARY
    
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:.github/dockerfiles/slurm"
          push: false
          tags: ${{ env.IMG_REPO_URL }}:${{ env.SLURMIMAGE_RELTAG }}

      - name: Login to github registry and push image there
        shell: bash
        run: |
          echo ${{ secrets.PACKAGES_SECRET }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo $?
          docker push ${IMG_REPO_URL}:${SLURMIMAGE_RELTAG}

  build_pmix:
    name: Build pmix
    runs-on: ubuntu-latest
    needs: build_pmix_build-image
    env:
      PERSISTENCE_FILE_PMIX: build_pmix_build-image_vars.txt
    container:
      image: ${{ needs.build_pmix_build-image.outputs.IMGURL }}
      options: --privileged
    steps:

      - name: Download persistent data from build_pmix_build-image
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PERSISTENCE_FILE_PMIX }}     
                
      - name: Download pmix and unpack it
        shell: bash
        run: |
          # load persistent data
          cat ${PERSISTENCE_FILE_PMIX}
          source ${PERSISTENCE_FILE_PMIX}
          echo "PMIX_RELTAG: ${PMIX_RELTAG}, PMIX_VERSION: ${PMIX_VERSION}"

          mkdir -p ${HOME}/rpmbuild/SOURCES/
          wget --quiet https://github.com/openpmix/openpmix/releases/download/v${PMIX_VERSION}/pmix-${PMIX_VERSION}.tar.bz2
          tar -xf ./pmix*
          cp pmix-*.tar.bz2 ${HOME}/rpmbuild/SOURCES/
          sed -i "s/^Release.*$/Release: ${PMIX_RELTAG}%{?dist}/g" pmix-*/contrib/pmix.spec
          
      - name: Build pmix rpms
        shell: bash
        run: |
          rpmbuild --define 'build_all_in_one_rpm 0' --define 'configure_options --disable-per-user-config-files' -ba ./pmix-*/contrib/pmix.spec
          mkdir ${GITHUB_WORKSPACE}/rpms
          cp ${HOME}/rpmbuild/RPMS/x86_64/pmix-*.rpm ${GITHUB_WORKSPACE}/rpms/
