---
name: release
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [push]
jobs:
  job000:
    name: Build base docker image
    runs-on: ubuntu-latest
    steps:
      - name: Login to github image/package registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:.github/dockerfiles/base"
          push: true
          tags: user/app:latest

  job001:
    name: Build pmix
    runs-on: ubuntu-latest
    needs: job000
    container:
      image: rockylinux/rockylinux:8
      options: --privileged
    steps:
      - name: Prepare base build env
        run: |
          dnf install -y dnf-plugins-core
          dnf config-manager --set-enabled powertools
          dnf install -y rpm-build automake autoconf libtool make pkg-config less vim flex bison doxygen cmake bash-doc which wget
          dnf upgrade -y
          mkdir -p ${HOME}/rpmbuild/SOURCES/
      - name: Install pmix-specific pkgs
        run: |
          dnf install -y zlib-devel hwloc-devel libevent-devel python3-devel jansson-devel
          python3 -m pip install sphinx
      - name: Download pmix and unpack it
        run: |
          export PMIX_VERSION="4.2.7"
          export PMIX_RELEASE="$(date +%Y%m%d%H%M%S)"
          wget --quiet https://github.com/openpmix/openpmix/releases/download/v${PMIX_VERSION}/pmix-${PMIX_VERSION}.tar.bz2
          tar -xf ./pmix*
          cp pmix-*.tar.bz2 $HOME/rpmbuild/SOURCES/
          sed -i "s/^Release.*$/Release: ${PMIX_RELEASE}%{?dist}/g" pmix-*/contrib/pmix.spec
      - name: Build pmix rpms
        run: |
          rpmbuild --define 'build_all_in_one_rpm 0' --define 'configure_options --disable-per-user-config-files' -ba ./pmix-*/contrib/pmix.spec
          mkdir ${GITHUB_WORKSPACE}/rpms
          cp ${HOME}/rpmbuild/RPMS/x86_64/pmix-*.rpm ${GITHUB_WORKSPACE}/rpms/
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pmix_rpms
          path: |
            ${{ github.workspace }}/rpms/*.rpm
  job002:
    name: Build Slurm
    needs: job001
    runs-on: ubuntu-latest
    container:
      image: rockylinux/rockylinux:8
      options: --privileged
    steps:
      - name: Prepare base build env
        run: |
          dnf install -y dnf-plugins-core
          dnf config-manager --set-enabled powertools
          dnf install -y rpm-build automake autoconf libtool make pkg-config less vim flex bison doxygen cmake bash-doc which wget
          dnf upgrade -y
          mkdir -p ${HOME}/rpmbuild/SOURCES/
          
      - name: Install slurm-build-specific pkgs
        run: |
          dnf upgrade -y
          dnf install -y epel-release
          dnf install -y libjwt-devel zlib-devel munge-devel pam-devel perl-ExtUtils-MakeMaker python3 readline-devel mariadb-devel numactl-devel libevent-devel hwloc-devel lua-devel json-c-devel pam-devel libX11-devel libssh2-devel libyaml-devel libcurl-devel lz4-devel freeipmi-devel http-parser-devel dbus-devel
          dnf install -y createrepo_c gtk2-devel
          
      - name: Download artifacts - pmix rpms from previous step
        uses: actions/download-artifact@v3
        with:
          name: pmix_rpms
          
      - name: Install downloaded rpms from previous job
        run: |
          dnf install -y ./pmix*.rpm

      - name: Download slurm tarballm, unpack, patch spec file
        run: |
           export SLURM_VERSION="23.02.6"
           export SLURM_RELEASE="$(date +%Y%m%d%H%M%S)"
           wget --quiet https://download.schedmd.com/slurm/slurm-${SLURM_VERSION}.tar.bz2
           tar -xf ./slurm*
           cp slurm-*.tar.bz2 $HOME/rpmbuild/SOURCES/
           sed -i "s/^%define rel.*$/%define rel     ${SLURM_RELEASE}/g" slurm*/slurm.spec
           sed -i "s/^%global slurm_source_dir.*$/%global slurm_source_dir %{name}-%{version}/g" ./slurm*/slurm.spec

      - name: Install NVML libraries
        run: |
           export CUDA_VERSION="12-2"
           dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo
           dnf clean all
           dnf -y install cuda-nvml-devel-${CUDA_VERSION} cuda-${CUDA_VERSION}

      - name: Try to build slurm
        run: |
           rpmbuild --define '_with_nvml --with-nvml=/usr/local/cuda/targets/x86_64-linux/' \
                    --with pam \
                    --with slurmrestd \
                    --with hwloc \
                    --with lua \
                    --with mysql \
                    --with numa \
                    --with pmix \
                    -ba ./slurm-*/slurm.spec
           mkdir ${GITHUB_WORKSPACE}/rpms
           cp ${HOME}/rpmbuild/RPMS/x86_64/pmix-*.rpm ${GITHUB_WORKSPACE}/rpms/
           
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: slurm_rpms
          path: |
            ${{ github.workspace }}/rpms/*.rpm

      
          
          
           



          
    
